<?php

function setting_info()
{
    $settings = \App\Models\Setting::first();
    return $settings;
}

function entryBy($entry_by)
{
    $user = \App\Models\User::where('id', $entry_by)->first();
    if ($user == null)
        return 'N/A';
    else
        return $user->name;
}

function pqDetails($product_id)
{
    $product = \App\Models\PqDetails::where('product_id', $product_id)->first();
    // dd($product);
    if ($product_id == null)
        return 'N/A';
    else
        return ($product) ? $product->product_details : ' N/A ';
}
function entryByInfo($entry_by)
{
    $user = \App\Models\User::where('id', $entry_by)->first();
    if ($user == null){
        $uinfo['name']='N/A';
        $uinfo['cell_phone']='N/A';
        $uinfo['email']='N/A';
        return $uinfo;
    }
    else {
        ($user->name) ? $uinfo['name'] = $user->name : $uinfo['name'] = 'Name: N/A';
        ($user->cell_phone) ? $uinfo['cell_phone'] = $user->cell_phone : $uinfo['cell_phone'] = 'Mob: N/A';
        ($user->email) ? $uinfo['email'] = $user->email : $uinfo['email'] = 'Email: N/A';
        return $uinfo;
    }

}

function companyBy($user_id)
{
    $user = \App\Models\User::where('id', $user_id)->first();
    if ($user->profile->company_name_id == null)
        return $user->name;
    else
        return $user->profile->company_name->title;
}

function companyAddress($user_id)
{
    $user = \App\Models\User::where('id', $user_id)->first();
    if ($user->profile->company_name_id == null)
        return '';
    else
        return $user->profile->company_name->address . ', ' . $user->profile->company_name->address2;
}

function autoGeneratedCode($initial, $table_name)
{
    $s_year = date('Y-m') . '-00 00:00:00';
    $e_year = date('Y-m') . '-31 23:59:59';
    $count_table_row = (DB::table($table_name)
            ->whereBetween('created_at', [$s_year, $e_year])->max('id')) + 1;
    $transaction_code = $initial . date('ym') . '-' . str_pad($count_table_row, 6, '0', STR_PAD_LEFT);
    return $transaction_code;
}

function autoTimeStampCode($initial)
{
    $utime = round(microtime(true) * 1000); //1704696475337 milliseconds
    $user_id = Auth::id();
    return $user_id . $initial . $utime;
}

function autoTimeStampCode1($initial, $table)
{
    $count_row_number = (DB::table($table)->max('id')) + 1;
    $a = substr($count_row_number, -6);
    $transaction_code = $initial . date('ym') . '-' . str_pad($a, 6, '0', STR_PAD_LEFT);
    return $transaction_code;
}

function transactionMadeFromAccount($tracking_id)
{
    $bh = \App\Models\BankLedger::where('transaction_code', $tracking_id)->first();
    if ($bh == null)
        return 'N/A';
    else
        return $bh;
}

function branch_info($brinfo)
{
    $bh = \App\Models\Branch::where('id', $brinfo)->first();
    if ($bh == null)
        return 'N/A';
    else
        return $bh;
}

function branch_list()
{
    if (session()->get('branch') == 'all') {
        $branches = DB::table('branches')->where('status', 'Active')->pluck('title', 'id')->prepend('Select Branch', '')->toArray();
    } else {
        $branches = DB::table('branches')->where('id', session()->get('branch'))->pluck('title', 'id')->toArray();
    }
    return $branches;
}

function user_list()
{
    $users = DB::table('users')
        ->select(['users.id', DB::raw("CONCAT(COALESCE(users.name,''), '(',COALESCE(user_types.title,''), ')', COALESCE(users.cell_phone,'')) as user_info")])
        ->join('user_types', 'user_types.id', '=', 'users.user_type_id')
        ->orderBy('users.name')->pluck('user_info', 'users.id')
        ->prepend('Select User', '')->toArray();
    return $users;
}

function customer_list()
{
    $customers = DB::table('users')->where('users.user_type_id', 3)
        ->select(['users.id', DB::raw("CONCAT(COALESCE(users.name,''), ':', COALESCE(users.cell_phone,'')) as user_info")])
        ->orderBy('users.name')->pluck('user_info', 'users.id')
        ->prepend('Select Customer', '')->toArray();
    return $customers;
}

function supplier_list()
{
    $customers = DB::table('users')->where('users.user_type_id', 4)
        ->select(['users.id', DB::raw("CONCAT(COALESCE(users.name,''), ':', COALESCE(users.cell_phone,'')) as user_info")])
        ->orderBy('users.name')->pluck('user_info', 'users.id')
        ->prepend('Select Supplier', '')->toArray();
    return $customers;
}

function product_list()
{
    $products = DB::table('products')
        ->select(['products.id', 'products.title'])
        ->where('status', 'Active')
        ->orderBy('title')->pluck('title', 'id')
        ->prepend('Select Product', '')->toArray();
    return $products;
}
function brand_list()
{
    $brands = DB::table('brands')
        ->select(['brands.id', 'brands.title'])
        ->where('status', 'Active')
        ->orderBy('title')->pluck('title', 'id')
//        ->prepend('Select brand', '')
        ->toArray();
    return $brands;
}

function transaction_method()
{
    $transaction_methods = DB::table('transaction_methods')->orderBy('title')->pluck('title', 'id')->prepend('Select Transaction Method', '')->toArray();
    return $transaction_methods;
}

function static_product_stock($product_id)
{
    $in_stock['purchase'] = (DB::table('invoice_details')->where('product_id', $product_id)
        ->where('transaction_type', 'Purchase')->sum('qty'));
    $in_stock['sales'] = (DB::table('invoice_details')->where('product_id', $product_id)
        ->where('transaction_type', 'Sales')->sum('qty'));
    $in_stock['stock'] = (DB::table('invoice_details')->where('product_id', $product_id)
            ->where('transaction_type', 'Purchase')->sum('qty'))
        - (DB::table('invoice_details')->where('product_id', $product_id)
            ->where('transaction_type', 'Sales')->sum('qty'))
        - (DB::table('invoice_details')->where('product_id', $product_id)
            ->where('transaction_type', 'Order')->where('status', 2)->sum('qty'));
    return $in_stock;

}

function getSmallestDate($user_id)
{
    $profile = DB::table('profiles')->where('user_id', $user_id)->first();
    $ledger = DB::table('ledgers')->where('user_id', $user_id)->first();
    $invoice = DB::table('invoices')->where('user_id', $user_id)->first();
    // Parse the date strings into Carbon instances, ignoring invalid or empty dates
    $dates = collect([$profile->joining_date, $ledger->transaction_date, $invoice->transaction_date])->map(function ($date) {
        return $date ? Carbon\Carbon::parse($date) : null;
    })->filter(); // Remove null values (i.e., invalid/missing dates)
    // Check if there are valid dates
    if ($dates->isEmpty()) {
        return null; // Return null if no valid dates are found
    }
    // Find the earliest (smallest) date
    return $dates->min();

    /*
    // Example usage
    $date1 = '2024-08-19 14:30:00';
    $date2 = null; // Missing
    $date3 = '2024-08-19 15:30:00';
    $date4 = ''; // Missing or empty string
    $smallestDate = getSmallestDate($date1, $date2, $date3, $date4);
    echo $smallestDate ? $smallestDate->toDateTimeString() : 'No valid date found';
    */
}

function numberToWord($num)
{
    $num = ( string )(( int )$num);
    if (( int )($num) && ctype_digit($num)) {
        $words = array();
        $num = str_replace(array(',', ' '), '', trim($num));
        $list1 = array('', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
            'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen',
            'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen');
        $list2 = array('', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty',
            'seventy', 'eighty', 'ninety', 'hundred');
        $list3 = array('', 'thousand', 'million', 'billion', 'trillion',
            'quadrillion', 'quintillion', 'sextillion', 'septillion',
            'octillion', 'nonillion', 'decillion', 'undecillion',
            'duodecillion', 'tredecillion', 'quattuordecillion',
            'quindecillion', 'sexdecillion', 'septendecillion',
            'octodecillion', 'novemdecillion', 'vigintillion');
        $num_length = strlen($num);
        $levels = ( int )(($num_length + 2) / 3);
        $max_length = $levels * 3;
        $num = substr('00' . $num, -$max_length);
        $num_levels = str_split($num, 3);
        foreach ($num_levels as $num_part) {
            $levels--;
            $hundreds = ( int )($num_part / 100);
            $hundreds = ($hundreds ? ' ' . $list1[$hundreds] . ' Hundred' . ($hundreds == 1 ? '' : 's') . ' ' : '');
            $tens = ( int )($num_part % 100);
            $singles = '';
            if ($tens < 20) {
                $tens = ($tens ? ' ' . $list1[$tens] . ' ' : '');
            } else {
                $tens = ( int )($tens / 10);
                $tens = ' ' . $list2[$tens] . ' ';
                $singles = ( int )($num_part % 10);
                $singles = ' ' . $list1[$singles] . ' ';
            }
            $words[] = $hundreds . $tens . $singles . (($levels && ( int )($num_part)) ? ' ' . $list3[$levels] . ' ' : '');
        }
        $commas = count($words);
        if ($commas > 1) {
            $commas = $commas - 1;
        }
        $words = implode(', ', $words);
        $words = trim(str_replace(' ,', ',', ucwords($words)), ', ');
        if ($commas) {
            $words = str_replace(',', ' and', $words);
        }
        return $words;
    } else if (!(( int )$num)) {
        return 'Zero';
    }
    return '';
}

function ledger_balancce($user_id)
{
    $transaction_account = DB::table('invoices')
        ->select('transaction_date', 'transaction_code','sl_no', 'invoice_total as amount', 'transaction_type', 'reference', 'created_at')
        ->where('transaction_type', '!=', 'Order')->where('user_id', $user_id)->get();
    $ledger = DB::table('ledgers')->select('ledgers.transaction_date', 'ledgers.transaction_code','ledgers.sl_no', 'ledgers.amount',
        'transaction_types.title as transaction_type', 'ledgers.comments as reference', 'ledgers.created_at')
        ->join('transaction_types', 'transaction_types.id', '=', 'ledgers.transaction_type_id')
        ->where('ledgers.user_id', $user_id)->get();

    $myall = array_merge($transaction_account->all(), $ledger->all());
    $merged_ledger = collect($myall)->sortBy('transaction_date')->sortBy('created_at');
    $sort_array = [];
    foreach ($merged_ledger as $key => $data)
        $sort_array[] = $data;
//        dd($sort_array);

    $ledger_balance['transaction_type'] = [];
    $ledger_balance['transaction_date'] = [];
    $ledger_balance['transaction_code'] = [];
    $ledger_balance['sl_no'] = [];
    $ledger_balance['reference'] = [];
    $ledger_balance['transaction_amount'] = [];
    $ledger_balance['balance'] = [];
    $ledger = [];
    $runningSum = 0;
    for ($i = 0; $i < count($sort_array); $i++) {
        if ($sort_array[$i]->transaction_type == 'Credited') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Debited') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Receipt') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Sales') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Return') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Payment') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Purchase') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Put Back') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Payslip') {
            $runningSum += $sort_array[$i]->amount;
        }
        $ledger_balance['transaction_type'][] = $sort_array[$i]->transaction_type;
        $ledger_balance['transaction_date'][] = $sort_array[$i]->transaction_date;
        $ledger_balance['transaction_code'][] = $sort_array[$i]->transaction_code;
        $ledger_balance['sl_no'][] = $sort_array[$i]->sl_no;
        $ledger_balance['reference'][] = $sort_array[$i]->reference;
        $ledger_balance['transaction_amount'][] = $sort_array[$i]->amount;
        $ledger_balance['balance'][] = $runningSum;
        $ledger[] = $ledger_balance;
    }

    return $ledger;
}

function ledgerBalance($user_id)
{
//    dd($user_id);
    $ledgerReceived['user_info'] = [];
    $ledgerReceived['last_transaction_amount'] = [];
    $ledgerReceived['last_transaction_date'] = [];
    $ledgerReceived['last_transaction_type'] = [];
    $ledgerReceived['balance'] = [];

    $ledgerUser = \App\Models\User::where('id', $user_id)->first();
    $ledgerReceived['user_info'] = $ledgerUser;
    $ledgerLastReceived = \App\Models\Ledger::where('user_id', $user_id)
        ->latest('transaction_date')->first();
    if ($ledgerLastReceived != null) {
        $ledgerReceived['last_transaction_amount'] = $ledgerLastReceived->amount;
        $ledgerReceived['last_transaction_date'] = Carbon\Carbon::parse($ledgerLastReceived->transaction_date)->format('d-M-Y');
        $ledgerReceived['last_transaction_type'] = $ledgerLastReceived->transaction_type->title;
    } else {
        $ledgerReceived['last_transaction_amount'] = 0;
        $ledgerReceived['last_transaction_date'] = '-';
        $ledgerReceived['last_transaction_type'] = '';
    }

    $sort_array_ledger = DB::table('ledgers')
        ->where('user_id', $user_id)
        ->get();
    $runningSum = 0;
    $ledger_balance = [];
    for ($i = 0; $i < count($sort_array_ledger); $i++) {
        if ($sort_array_ledger[$i]->transaction_type_id == 1) { //Credited=1
            $runningSum += $sort_array_ledger[$i]->amount;
        }
        if ($sort_array_ledger[$i]->transaction_type_id == 2) { //Debited=2
            $runningSum -= $sort_array_ledger[$i]->amount;
        }
        if ($sort_array_ledger[$i]->transaction_type_id == 3) { //Receipt=3
            $runningSum += $sort_array_ledger[$i]->amount;
        }
        if ($sort_array_ledger[$i]->transaction_type_id == 4) { //Payment=4
            $runningSum -= $sort_array_ledger[$i]->amount;
        }
        if ($sort_array_ledger[$i]->transaction_type_id == 7) { //'Payslip=7'
            $runningSum += $sort_array_ledger[$i]->amount;
        }
        $ledger_balance = $runningSum;
    }
    $sort_array_invoice = DB::table('invoices')
        ->select('invoice_total as amount', 'transaction_type')
        ->where('transaction_type', '!=', 'Order')->where('user_id', $user_id)->get();
    $runningSum_invoice = 0;
    $invoice_balance = [];
    for ($i = 0; $i < count($sort_array_invoice); $i++) {
        if ($sort_array_invoice[$i]->transaction_type == 'Sales') {
            $runningSum_invoice -= $sort_array_invoice[$i]->amount;
        }
        if ($sort_array_invoice[$i]->transaction_type == 'Return') {
            $runningSum_invoice += $sort_array_invoice[$i]->amount;
        }
        if ($sort_array_invoice[$i]->transaction_type == 'Purchase') {
            $runningSum_invoice += $sort_array_invoice[$i]->amount;
        }
        if ($sort_array_invoice[$i]->transaction_type == 'Put Back') {
            $runningSum_invoice -= $sort_array_invoice[$i]->amount;
        }
        $invoice_balance = $runningSum_invoice;
    }

//    dd(($invoice_balance)?$invoice_balance:0);
//    $ledgerReceived['balance']=$ledger_balance??0+$invoice_balance??0;
    $ledgerReceived['balance'] = (($ledger_balance) ? $ledger_balance : 0) + (($invoice_balance) ? $invoice_balance : 0);


//    dd($ledgerReceived);
    return $ledgerReceived;
}

function ledger_account($account_id, $start_date, $end_date)
{
    $mindate_ledger = DB::table('bank_ledgers')->MIN('transaction_date');
    $before1day1 = new DateTime($start_date);
    $dateObject=$before1day1->sub(new DateInterval('P1D'));
    $before1day=$dateObject->format('Y-m-d'). ' 23:59:59';
    $bd_bank_credit = DB::table('bank_ledgers')
        ->where('bank_ledgers.bank_account_id', $account_id)
        ->whereIn('transaction_type_id', [1,3,5,8,10])
        ->whereBetween('transaction_date', [$mindate_ledger, $before1day])
        ->sum('amount');
    $bd_bank_debit = DB::table('bank_ledgers')
        ->where('bank_ledgers.bank_account_id', $account_id)
        ->whereIn('transaction_type_id', [2,4,6,9,11])
        ->whereBetween('transaction_date', [$mindate_ledger, $before1day])
        ->sum('amount');
    $balance_brought_down=$bd_bank_credit-$bd_bank_debit;
//    dd($balance_bd);
// Create a new ledger entry for balance brought down
    $balance_brought_down_entry = (object) [
        'transaction_date' => $before1day,
        'transaction_code' => null,
        'sl_no' => null,
        'amount' => $balance_brought_down,
        'transaction_type' => 'Credited',
        'reference' => 'Balance Brought Down',
        'ref_date' => null,
        'ref_no' => null,
        'created_at' => null,
    ];

    $ledger = DB::table('bank_ledgers')->select('bank_ledgers.transaction_date', 'bank_ledgers.transaction_code', 'bank_ledgers.amount',
        'transaction_types.title as transaction_type', 'bank_ledgers.particulars as reference', 'bank_ledgers.sl_no',
        'bank_ledgers.ref_date', 'bank_ledgers.ref_no', 'bank_ledgers.created_at')
        ->join('transaction_types', 'transaction_types.id', '=', 'bank_ledgers.transaction_type_id')
        ->where('bank_ledgers.bank_account_id', $account_id)
        ->whereBetween('bank_ledgers.transaction_date', [$start_date, $end_date])
        ->orderBy('bank_ledgers.transaction_date')->get();
//dd($ledger);
//    $myall = $ledger;
//    $merged_ledger = collect($myall)->sortBy('transaction_date')->sortBy('created_at');
    $ledger->prepend($balance_brought_down_entry);
    $merged_ledger = $ledger;
    $sort_array = [];
    foreach ($merged_ledger as $key => $data)
        $sort_array[] = $data;

    $ledger_balance['transaction_type'] = [];
    $ledger_balance['transaction_date'] = [];
    $ledger_balance['transaction_code'] = [];
    $ledger_balance['sl_no'] = [];
    $ledger_balance['reference'] = [];
    $ledger_balance['ref_date'] = [];
    $ledger_balance['ref_no'] = [];
    $ledger_balance['transaction_amount'] = [];
    $ledger_balance['balance'] = [];
    $ledger = [];
    $runningSum = 0;
    for ($i = 0; $i < count($sort_array); $i++) {
        if ($sort_array[$i]->transaction_type == 'Credited') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Debited') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Receipt') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Payment') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Deposit') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Withdraw') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Loan') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Loan Payment') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Investment') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Profit Share') {
            $runningSum -= $sort_array[$i]->amount;
        }

        $ledger_balance['transaction_type'][] = $sort_array[$i]->transaction_type;
        $ledger_balance['transaction_date'][] = $sort_array[$i]->transaction_date;
        $ledger_balance['transaction_code'][] = $sort_array[$i]->transaction_code;
        $ledger_balance['sl_no'][] = $sort_array[$i]->sl_no;
        $ledger_balance['reference'][] = $sort_array[$i]->reference;
        $ledger_balance['ref_no'][] = $sort_array[$i]->ref_no;
        $ledger_balance['ref_date'][] = $sort_array[$i]->ref_date;
        $ledger_balance['transaction_amount'][] = $sort_array[$i]->amount;
        $ledger_balance['balance'][] = $runningSum;
        $ledger[] = $ledger_balance;
    }

    return $ledger;
}

function ledger_account_all($start_date, $end_date)
{
    $mindate_ledger = DB::table('bank_ledgers')->MIN('transaction_date');
    $before1day = new DateTime($start_date);
    $dateObject=$before1day->sub(new DateInterval('P1D'));
    $before1day=$dateObject->format('Y-m-d'). ' 23:59:59';
//    $before1day=($before1day_obj->sub(new DateInterval('P1D')))->format('Y-m-d'). ' 23:59:59';
    $bd_bank_credit = DB::table('bank_ledgers')
        ->whereIn('transaction_type_id', [1,3,5,8,10])
        ->whereBetween('transaction_date', [$mindate_ledger, $before1day])
        ->sum('amount');
//    dd($mindate_ledger);
    $bd_bank_debit = DB::table('bank_ledgers')
        ->whereIn('transaction_type_id', [2,4,6,9,11])
        ->whereBetween('transaction_date', [$mindate_ledger, $before1day])
        ->sum('amount');
    $balance_brought_down=$bd_bank_credit-$bd_bank_debit;
//    dd($balance_bd);
// Create a new ledger entry for balance brought down
    $balance_brought_down_entry = (object) [
        'transaction_date' => $before1day,
        'transaction_code' => null,
        'sl_no' => null,
    'amount' => $balance_brought_down,
        'transaction_type' => 'Credited',
        'reference' => 'Balance Brought Down',
        'account_name' => null,
        'branch_name' => null,
        'created_at' => null,
//        'balance_brought_down' => $balance_brought_down,
    ];
    $ledger = DB::table('bank_ledgers')->select('bank_ledgers.transaction_date', 'bank_ledgers.transaction_code', 'bank_ledgers.amount',
        'transaction_types.title as transaction_type', 'bank_ledgers.particulars as reference', 'bank_ledgers.sl_no',
        'bank_accounts.account_name', 'branches.title as branch_name', 'bank_ledgers.created_at')
        ->join('transaction_types', 'transaction_types.id', '=', 'bank_ledgers.transaction_type_id')
        ->join('branches', 'branches.id', '=', 'bank_ledgers.branch_id')
        ->join('bank_accounts', 'bank_accounts.id', '=', 'bank_ledgers.bank_account_id')
        ->whereBetween('bank_ledgers.transaction_date', [$start_date, $end_date])
        ->orderBy('bank_ledgers.transaction_date')->get();
//    $myall = $ledger;
//    $merged_ledger = collect($myall)->sortBy('transaction_date')->sortBy('created_at');
    $ledger->prepend($balance_brought_down_entry);
    $merged_ledger = $ledger;
//    dd($merged_ledger);
    $sort_array = [];
    foreach ($merged_ledger as $key => $data)
        $sort_array[] = $data;

    $ledger_balance['transaction_type'] = [];
    $ledger_balance['transaction_date'] = [];
    $ledger_balance['transaction_code'] = [];
    $ledger_balance['sl_no'] = [];
    $ledger_balance['reference'] = [];
    $ledger_balance['branch_name'] = [];
    $ledger_balance['account_name'] = [];

    $ledger_balance['transaction_amount'] = [];
    $ledger_balance['balance'] = [];
    $ledger = [];
    $runningSum = 0;
    for ($i = 0; $i < count($sort_array); $i++) {
        if ($sort_array[$i]->transaction_type == 'Credited') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Debited') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Receipt') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Payment') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Deposit') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Withdraw') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Loan') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Loan Payment') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Investment') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Profit Share') {
            $runningSum -= $sort_array[$i]->amount;
        }
        $ledger_balance['transaction_type'][] = $sort_array[$i]->transaction_type;
        $ledger_balance['transaction_date'][] = $sort_array[$i]->transaction_date;
        $ledger_balance['transaction_code'][] = $sort_array[$i]->transaction_code;
        $ledger_balance['sl_no'][] = $sort_array[$i]->sl_no;
        $ledger_balance['reference'][] = $sort_array[$i]->reference;
        $ledger_balance['branch_name'][] = $sort_array[$i]->branch_name;
        $ledger_balance['account_name'][] = $sort_array[$i]->account_name;
        $ledger_balance['transaction_amount'][] = $sort_array[$i]->amount;
        $ledger_balance['balance'][] = $runningSum;
        $ledger[] = $ledger_balance;
    }
//dd($ledger);
    return $ledger;
}

function investment_statement($start_date, $end_date, $tr_type)
{
//    dd($tr_type);
    $mindate_ledger = DB::table('bank_ledgers')->MIN('transaction_date');
    $before1day1 = new DateTime($start_date);
    $dateObject=$before1day1->sub(new DateInterval('P1D'));
    $before1day=$dateObject->format('Y-m-d'). ' 23:59:59';
    $bd_bank_credit = DB::table('bank_ledgers')
        ->whereIn('transaction_type_id', $tr_type)
        ->whereBetween('transaction_date', [$mindate_ledger, $before1day])
        ->sum('amount');
    $bd_bank_debit = DB::table('bank_ledgers')
        ->whereIn('transaction_type_id', $tr_type)
        ->whereBetween('transaction_date', [$mindate_ledger, $before1day])
        ->sum('amount');
    $balance_brought_down=$bd_bank_credit-$bd_bank_debit;
// Create a new ledger entry for balance brought down
    $balance_brought_down_entry = (object) [
        'transaction_date' => $before1day,
        'transaction_code' => null,
        'sl_no' => null,
        'amount' => $balance_brought_down,
        'transaction_type' => 'Credited',
        'reference' => 'Balance Brought Down',
        'ref_date' => null,
        'ref_no' => null,
        'created_at' => null,
    ];

    $ledger = DB::table('bank_ledgers')->select('bank_ledgers.transaction_date', 'bank_ledgers.transaction_code', 'bank_ledgers.amount',
        'transaction_types.title as transaction_type', 'bank_ledgers.particulars as reference', 'bank_ledgers.sl_no',
        'bank_ledgers.ref_date', 'bank_ledgers.ref_no', 'bank_ledgers.created_at')
        ->join('transaction_types', 'transaction_types.id', '=', 'bank_ledgers.transaction_type_id')
        ->whereBetween('bank_ledgers.transaction_date', [$start_date, $end_date])
        ->whereIn('transaction_type_id', $tr_type)
        ->orderBy('bank_ledgers.transaction_date')->get();
    $ledger->prepend($balance_brought_down_entry);
    $merged_ledger = $ledger;
    $sort_array = [];
    foreach ($merged_ledger as $key => $data)
        $sort_array[] = $data;

    $ledger_balance['transaction_type'] = [];
    $ledger_balance['transaction_date'] = [];
    $ledger_balance['transaction_code'] = [];
    $ledger_balance['sl_no'] = [];
    $ledger_balance['reference'] = [];
    $ledger_balance['ref_date'] = [];
    $ledger_balance['ref_no'] = [];
    $ledger_balance['transaction_amount'] = [];
    $ledger_balance['balance'] = [];
    $ledger = [];
    $runningSum = 0;
    for ($i = 0; $i < count($sort_array); $i++) {
        if ($sort_array[$i]->transaction_type == 'Credited') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Debited') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Receipt') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Payment') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Deposit') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Withdraw') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Loan') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Loan Payment') {
            $runningSum -= $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Investment') {
            $runningSum += $sort_array[$i]->amount;
        }
        if ($sort_array[$i]->transaction_type == 'Profit Share') {
            $runningSum -= $sort_array[$i]->amount;
        }

        $ledger_balance['transaction_type'][] = $sort_array[$i]->transaction_type;
        $ledger_balance['transaction_date'][] = $sort_array[$i]->transaction_date;
        $ledger_balance['transaction_code'][] = $sort_array[$i]->transaction_code;
        $ledger_balance['sl_no'][] = $sort_array[$i]->sl_no;
        $ledger_balance['reference'][] = $sort_array[$i]->reference;
        $ledger_balance['ref_no'][] = $sort_array[$i]->ref_no;
        $ledger_balance['ref_date'][] = $sort_array[$i]->ref_date;
        $ledger_balance['transaction_amount'][] = $sort_array[$i]->amount;
        $ledger_balance['balance'][] = $runningSum;
        $ledger[] = $ledger_balance;
    }

    return $ledger;
}


//_________________PaymentRequest
if (!function_exists('prSl')) {
    function prSl($initial, $req_date)
    {
        $monthly_count_invoice = DB::table('payment_requests')
            ->whereYear('req_date', $req_date->format('Y'))
            ->whereMonth('req_date', $req_date->format('m'))
            ->count();
        $date = $req_date->format('ym'); // Current month and year
        $sl = $initial . $date . '-' . str_pad($monthly_count_invoice + 1, 4, '0', STR_PAD_LEFT);
        $allSls = getPrSls($sl);
        if (!$allSls->contains('req_no', $sl)) {
            return $sl;
        }
        // Just append numbers like a savage until we find not used.
        for ($i = 1; $i <= 10; $i++) {
            $newSl = $sl . '-' . $i;
            if (!$allSls->contains('req_no', $newSl)) {
                return $newSl;
            }
        }
        throw new \Exception('Can not create a unique sl');
    }
}
if (!function_exists('getPrSls')) {
    function getPrSls($sl)
    {
        return DB::table('payment_requests')->select('req_no')->where('req_no', 'like', $sl . '%')
            ->get();
    }
}
//_________________
if (!function_exists('invoiceSl')) {
    function invoiceSl($initial, $transaction_type, $transaction_date )
    {
        $monthly_count_invoice = DB::table('invoices')
            ->where('transaction_type', $transaction_type)
            ->whereYear('transaction_date', $transaction_date->format('Y'))
            ->whereMonth('transaction_date', $transaction_date->format('m'))
            ->count();
        $date = $transaction_date->format('ym'); // Current month and year
        $sl = $initial . $date . '-' . str_pad($monthly_count_invoice + 1, 4, '0', STR_PAD_LEFT);
        $allSls = getInvoiceSls($sl);
        if (!$allSls->contains('sl_no', $sl)) {
            return $sl;
        }
        // Just append numbers like a savage until we find not used.
        for ($i = 1; $i <= 10; $i++) {
            $newSl = $sl . '-' . $i;
            if (!$allSls->contains('sl_no', $newSl)) {
                return $newSl;
            }
        }
        throw new \Exception('Can not create a unique sl');
    }
}
if (!function_exists('getInvoiceSls')) {
    function getInvoiceSls($sl)
    {
        return DB::table('invoices')->select('sl_no')->where('sl_no', 'like', $sl . '%')
            ->get();
    }
}
//_________________
if (!function_exists('pqSl')) {
    function pqSl($initial, $transaction_date )
    {
        $monthly_count_pq = DB::table('price_quotations')
            ->whereYear('pq_date', $transaction_date->format('Y'))
            ->whereMonth('pq_date', $transaction_date->format('m'))
            ->count();
        $date = $transaction_date->format('ym'); // Current month and year
        $sl = $initial . $date . '-' . str_pad($monthly_count_pq + 1, 4, '0', STR_PAD_LEFT);
        $allSls = getPqSls($sl);
        if (!$allSls->contains('sl_no', $sl)) {
            return $sl;
        }
        // Just append numbers like a savage until we find not used.
        for ($i = 1; $i <= 10; $i++) {
            $newSl = $sl . '-' . $i;
            if (!$allSls->contains('sl_no', $newSl)) {
                return $newSl;
            }
        }
        throw new \Exception('Can not create a unique sl');
    }
}
if (!function_exists('getPqSls')) {
    function getPqSls($sl)
    {
        return DB::table('price_quotations')->select('ref_no')->where('ref_no', 'like', $sl . '%')
            ->get();
    }
}
//_________________All
if (!function_exists('createSl')) {
    function createSl($initial, $table, $dateColumn, $transaction_date)

    {
//        dd($transaction_date);
        $monthly_count_table = DB::table($table)
            ->whereYear($dateColumn, $transaction_date->format('Y'))
            ->whereMonth($dateColumn, $transaction_date->format('m'))
            ->count();
//        dd($monthly_count_table);
        $monthly_count_null_sl = DB::table($table)
            ->whereYear($dateColumn, $transaction_date->format('Y'))
            ->whereMonth($dateColumn, $transaction_date->format('m'))
            ->where('sl_no', null)
            ->count();
//dd($monthly_count_table);
        $date = date($transaction_date->format('y').$transaction_date->format('m')); // transaction month and year
//        $date = date('ym'); // Current month and year
        $sl = $initial . $date . '-' . str_pad(($monthly_count_table-$monthly_count_null_sl + 1), 4, '0', STR_PAD_LEFT);
        $allSls = getRelatedSls($sl, $table);
        if (!$allSls->contains('sl_no', $sl)) {
            return $sl;
        }
        // Just append numbers like a savage until we find not used.
        for ($i = 1; $i <= 100; $i++) {
            $newSl = $sl . '-' . $i;
            if (!$allSls->contains('sl_no', $newSl)) {
                return $newSl;
            }
        }
        throw new \Exception('Can not create a unique sl');
    }
}
if (!function_exists('getRelatedSls')) {
    function getRelatedSls($sl, $table)
    {
        return DB::table($table)->select('sl_no')->where('sl_no', 'like', $sl . '%')
            ->get();
    }
}
